import org.json.JSONObject;
import java.io.File;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.util.Scanner;

public class ShamirSecretSharing {
    
    // Function to decode Y value based on its base
    public static BigInteger decodeValue(String base, String value) {
        int baseInt = Integer.parseInt(base);
        return new BigInteger(value, baseInt);
    }

    // Function to perform Lagrange interpolation
    public static BigInteger lagrangeInterpolation(int[] x, BigInteger[] y, int k) {
        BigInteger secret = BigInteger.ZERO;
        BigInteger modulus = BigInteger.TEN.pow(100); // Large prime modulus for calculations

        for (int i = 0; i < k; i++) {
            BigInteger term = y[i];
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    term = term.multiply(BigInteger.valueOf(x[j]).negate()).mod(modulus);
                    term = term.multiply(BigInteger.valueOf(x[i] - x[j]).modInverse(modulus)).mod(modulus);
                }
            }
            secret = secret.add(term).mod(modulus);
        }

        return secret;
    }

    public static void main(String[] args) {
        try {
            // Read the input JSON file
            File file = new File("testcase.json");
            Scanner scanner = new Scanner(file);
            StringBuilder jsonString = new StringBuilder();
            while (scanner.hasNextLine()) {
                jsonString.append(scanner.nextLine());
            }
            scanner.close();

            // Parse the JSON
            JSONObject jsonObject = new JSONObject(jsonString.toString());
            JSONObject keys = jsonObject.getJSONObject("keys");
            int n = keys.getInt("n");
            int k = keys.getInt("k");

            // Arrays to store X and Y values
            int[] xValues = new int[k];
            BigInteger[] yValues = new BigInteger[k];

            // Extract X and Y values
            int index = 0;
            for (String key : jsonObject.keySet()) {
                if (!key.equals("keys") && index < k) {
                    int x = Integer.parseInt(key); // x value is the key
                    JSONObject root = jsonObject.getJSONObject(key);
                    String base = root.getString("base");
                    String value = root.getString("value");

                    // Decode y value
                    BigInteger y = decodeValue(base, value);

                    // Store x and y values
                    xValues[index] = x;
                    yValues[index] = y;
                    index++;
                }
            }

            // Use Lagrange Interpolation to find the constant term c
            BigInteger secret = lagrangeInterpolation(xValues, yValues, k);

            // Output the secret (constant term c)
            System.out.println("The constant term (secret) c is: " + secret);

        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
